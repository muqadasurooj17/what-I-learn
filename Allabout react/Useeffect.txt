
**Case 1: Fetching Data from an API**

You can use `useEffect` to make API requests when the component mounts and update the component's state with the 
fetched data.

```jsx
useEffect(() => {
  // Fetch data from an API
  const fetchData = async () => {
    try {
      const response = await fetch('https://api.example.com/data');
      const data = await response.json();
      setData(data);
    } catch (error) {
      setError(error);
    }
  };

  fetchData();
}, []); // Runs once when the component mounts.

**Case 3: Updating the Document Title**

You can use `useEffect` to dynamically update the document title based on component state.

```jsx
useEffect(() => {
  document.title = `Page Title: ${pageTitle}`;
}, [pageTitle]); // Update when 'pageTitle' changes
```

**Case 4: Managing Local Storage**

`useEffect` can be employed to synchronize component state with local storage.

```jsx
useEffect(() => {
  // Save 'userData' to local storage
  localStorage.setItem('userData', JSON.stringify(userData));
}, [userData]); // Update when 'userData' changes

// And later, you can use another effect to load data from local storage
useEffect(() => {
  const storedData = localStorage.getItem('userData');
  if (storedData) {
    setUserData(JSON.parse(storedData));
  }
}, []);
```

**Case 5: Animations and Timers**

`useEffect` can be used to create animations or manage timers in your component.

```jsx
useEffect(() => {
  // Start an animation or timer
  const intervalId = setInterval(() => {
    // Do something at a regular interval
  }, 1000);

  return () => {
    // Clean up the interval when the component unmounts
    clearInterval(intervalId);
  };
}, []);
```

**Case 6: Event Listeners**

You can use `useEffect` to add and remove event listeners.

```jsx
useEffect(() => {
  const handleClick = (event) => {
    // Handle click events
  };

  // Add event listener
  window.addEventListener('click', handleClick);

  return () => {
    // Remove event listener when the component unmounts
    window.removeEventListener('click', handleClick);
  };
}, []);
```